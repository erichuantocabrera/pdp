import barrileteCosmico.*
import localidades.*
import usuarios.*
import transportes.*
import viajes.*

describe "test el BarrileteCosmico" {
	
	const casaDeHari = new Localidad(0,[],"casa",0)// pues todos los usuarios deben tener una localidad de origen
	const pabloHari = new Usuario(1500,[],casaDeHari,"PHari",familiar)
	const esteban = new Usuario(1000000,[],casaDeHari,"EstebanKito",empresarial)
		
	const garlicSea = new Localidad(2500,["Ca√±a de Pescar","Piloto"],"Garlic's Sea",2)
	const silverSea = new Localidad(1350,["Protector Solar","Equipo de Buceo"],"Silver's Sea",5)
	const lastToninas = new Localidad(3500,["Vacuna Gripal","Vacuna B","Necronomicon"],"Last Toninas",10)
	const goodAirs = new Localidad(1500,["Cerveza","Protector Solar"],"Good Airs",20)
	
	const turboReactor = new Turbina(20)
	const turboPawer = new Turbina(40)
	
	const americanAirlines = new Avion(50,[turboReactor,turboPawer])
	const condorbus = new Micro (300)
	const trenRoca = new Tren(100)
	const titanic = new Barco(150,10)
		
	const viajeASilverSeaEnAvion = new Viaje(casaDeHari,silverSea,americanAirlines)
	const viajeASilverSeaEnMicro = new Viaje(casaDeHari,silverSea,condorbus)
	const viajeASilverSeaEnTren = new Viaje(casaDeHari,silverSea,trenRoca)  
	const viajeASilverSeaEnBarco = new Viaje(casaDeHari,silverSea,titanic)
	
	const aconcagua = new Montania(3000,["Vacuna B"],"aconcagua",200,2500)
	const everest = new Montania(3200,["Vacuna B"],"everest",200,5500)
    const cancun = new Playa(1400,["Vacuna B"],"cancun",200)
    const paris = new CiudadHistorica(10000,[],"ulala",250,5)
    
    const viajeACancunEnAvion = new Viaje(casaDeHari,cancun,americanAirlines)
	
	
	fixture{
		barrileteCosmico.mediosDeTransporte([americanAirlines,condorbus,trenRoca,titanic])
		barrileteCosmico.destinos([garlicSea,silverSea,lastToninas,goodAirs])
	}
	
	
	// ======================================= TEST PRIMERA VERSION  =====================================================
	test "los_destinos_mas_importantes_del_barrileteCosmico"{
		assert.equals([garlicSea,lastToninas],barrileteCosmico.destinosImportantes()) }
	
	test "aplicar_un_25%_de_descuento_a_lastToninas" {
		lastToninas.darDescuento(25)
		assert.equals(2625,lastToninas.precio()) }
	
	test "luego_de_aplicar_un_25%_de_descuento_a_last_Toninas_se_le_agrega_la_leyenda_de_certificado_de_descuento" {
		lastToninas.darDescuento(25)
		assert.that(lastToninas.contieneEquipaje("Certificado de descuento"))	}
	
	test "silverSea_no_es_un_destino_peligroso" {
		assert.notThat(silverSea.esDestinoPeligroso()) }
	
	test "aplicar_un_descuento_del_15%_a_todos_los_destinos_de_barrilete_Cosmico" {
		barrileteCosmico.destinos([garlicSea,silverSea,lastToninas,goodAirs])
		barrileteCosmico.aplicarDescuentosADestinos(15)
		assert.equals(2125,garlicSea.precio())
		assert.equals(1147.5,silverSea.precio())
		assert.equals(2975,lastToninas.precio())
		assert.equals(1275,goodAirs.precio())
		assert.that(garlicSea.contieneEquipaje("Certificado de descuento"))
		assert.that(silverSea.contieneEquipaje("Certificado de descuento"))
		assert.that(lastToninas.contieneEquipaje("Certificado de descuento"))
		assert.that(goodAirs.contieneEquipaje("Certificado de descuento"))	}
	
	test "los_destinos_mas_peligrosos_hasta_el_momento" {
		assert.equals([lastToninas],barrileteCosmico.destinosPeligrosos()) }
	
	test "barrilete_Cosmico_es_una_empresa_extrema" {
		assert.that(barrileteCosmico.esEmpresaExtrema())	}
	
	test "conocer_la_carta_de_destinos_de_barrileteCosmico" {
		assert.equals(["Garlic's Sea","Silver's Sea","Last Toninas","Good Airs"],barrileteCosmico.cartaDeDestinos()) }
	
	// ======================================  TEST SEGUNDA VERSION  =====================================================
	
	test "pablo_hari_no_puede_viajar_a_SilverSea_En_Avion" {
		assert.notThat(pabloHari.puedeViajar(viajeASilverSeaEnAvion))	}
		
	test "pablo_hari_no_puede_viajar_a_SilverSea_En_Micro " {
		assert.notThat(pabloHari.puedeViajar(viajeASilverSeaEnMicro))	}
		
	test "pablo_hari_no_puede_viajar_a_SilverSea_En_Tren" {
		assert.notThat(pabloHari.puedeViajar(viajeASilverSeaEnTren))	}
		
	test "pablo_hari_no_puede_viajar_a_SilverSea_En_Barco " {
		assert.notThat(pabloHari.puedeViajar(viajeASilverSeaEnBarco))	}
		
	//ahora_me_doy_cuenta_que_otra_forma_de_hacer_estos_cuatro_test_es:
	test "pablo_hari_no_puede_realizarViajar_a_SilverSea_en_cualquier_medioDetransporte" {
		assert.throwsExceptionWithMessage("viaje demasiado caro eliga otro porfavor",{pabloHari.realizarViaje(silverSea)})	}   
	// pablo_hari_es_una_persona_con poco_dinero_por_lo_que_no_puede_viajar_a_ningun_lado_en_ningun_medio_de_transporte_por_ahora	
	
	test "esteban_puede_viajar_a_SilverSea_En_Avion" {
		assert.that(esteban.puedeViajar(viajeASilverSeaEnAvion))	}
		
	test "esteban_puede_viajar_a_SilverSea_En_Barco " {
		assert.that(esteban.puedeViajar(viajeASilverSeaEnBarco))	}
			
	test "esteban_luego_de_viajar_a_silverSea_su_ubicacion_es:_silverSea " {
		esteban.realizarViaje(silverSea)
		assert.equals(silverSea,esteban.localidadDeOrigen())	}
		
	test "esteba_inicia_con_0_millas_de_viajes,_pues_es_nuevo_en_esto " {
		assert.equals(0,pabloHari.obtenerKilometros())	}
	
	test "esteban_luego_de_viajar_a_lastToninas_tiene_10_millas " {// 10 millas pues es la distancia entre su casa y lastToninas pues empezo con 0 millas
		esteban.realizarViaje(lastToninas)
		assert.equals(10,esteban.obtenerKilometros())	}
		
	test "esteban_luego_de_viajar_a_lastToninas_y_goodAirs_tiene_20_millas " {
		esteban.realizarViaje(lastToninas)
		esteban.realizarViaje(goodAirs)
		assert.equals(20,esteban.obtenerKilometros())	}
	
	test "agregado_de_viaje_a_esteban (para_ver_si_funciona_correctamente_el_armado_de_viajes_de_barrileteCosmico)" {
		esteban.realizarViaje(goodAirs)
		assert.equals(1,esteban.cantidadDeViajes())	}
	
	// =======================================  TEST TERCERA VERSION   =======================================================
	
	test "el_aconcagua_no_es_peligrosa_aunque_se_necesite_una_vacuna"{	
		assert.notThat(aconcagua.esDestinoPeligroso()) }
	
	test "el_everest_es_un_destino_peligroso"{	
		assert.that(everest.esDestinoPeligroso()) }
		
	test "la_playa_No_es_un_destino_peligroso"{	
		assert.notThat(cancun.esDestinoPeligroso()) }
	
	test "la_ciudad_historica_de_paris_es_destacada"{
		assert.that(paris.esDestacado()) }
		
	test "el_everest_es_un_destino_destacado"{
		assert.that(everest.esDestacado()) }
		
	test "el_costo_por_kilometro_del_avion_americanAirlans" {
		assert.equals(60,americanAirlines.costoPorKilometro())	}
		
	test "pablo_hari_no_puede_viajar_a_cancun_en_avion" {
		assert.notThat(pabloHari.puedeViajar(viajeACancunEnAvion)) }
		
	test "esteban_como_es_millonario_y_empresario_su_transporte_es_el_mas_Rapido_(avion)" {
		assert.equals(americanAirlines,esteban.elegirTransporte(barrileteCosmico.mediosDeTransporte(),paris) ) }
	
	test "esteban_realiza_el_viaje_a_cancun_en_avion" {
		esteban.realizarViaje(cancun)
		assert.equals(1,esteban.cantidadDeViajes())	}
	
	test "luego_de_realizar_su_viaje_a_cancun_a_esteban_le_queda_982600" {
		esteban.realizarViaje(cancun)
		assert.equals(986600,esteban.dineroQueCuenta())	}
		
	test "luego_de_viajar_a_cancun_y_al_everest_se_queda_en_el_everest" {
		esteban.realizarViaje(cancun)
		esteban.realizarViaje(everest)
		assert.equals(everest,esteban.localidadDeOrigen()) }
	
}